#include <iostream>
#include <fstream>
#include <string>
#include <cassert>

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/prio-queue.h"

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("pfabric");

std::map<uint32_t, double> flow_sizes;
int checkTimes = 0;
std::stringstream filePlotQueue;

std::map<uint32_t, std::vector<uint32_t> > source_flow;
ApplicationContainer sinkApps;

double sim_time = 13.0;
double measurement_starttime = 1.2;

// these two together
double price_update_time = 0.0001; //90us
double rate_update_time = 0.00005; //90us
double gamma_value = 0.00001; // price too jagged but values ok

// and these two together
double prio_q_min_update_time = 0.0001; //100us - roughly RTT
double gamma1_value = 10.0;  //the weight to the rate term

double alpha_value = 1.0*1e-10;
double target_queue = 30000.0;


float sampling_interval = 0.0001;
uint32_t pkt_size = 1040;
//uint32_t max_queue_size = 150000;
uint32_t max_ecn_thresh = 30000;
uint32_t max_queue_size = 150000000;
//uint32_t max_ecn_thresh = 30000;
//uint32_t max_segment_size = 1440;
uint32_t max_segment_size = 1410;
uint32_t ssthresh_value = 3000;
std::map<std::string, uint32_t> flowids;
uint32_t recv_buf_size = 1310720;
uint32_t send_buf_size = 1310720;

//uint16_t port=1000;
uint16_t *ports;

NodeContainer bottleNeckNode; // Only 1 switch
NodeContainer sourceNodes;    
NodeContainer sinkNodes;

double ONEG = 1000000000;
double link_rate = ONEG;
double link_delay = 7.0;
std::string link_rate_string = "1Gbps";

double load = 0.5;
double meanflowsize = 1138*1460 ; // what TBD?

/* Application configuration */
//ApplicationContainer apps;
std::vector< Ptr<Socket> > ns3TcpSockets;
std::string prefix;
void setuptracing(uint32_t sindex, Ptr<Socket> skt);
uint32_t util_method =1;


class FlowRecord
{
public:
  FlowRecord(uint32_t src_index, uint32_t dst_index, float flow_start_time, float flow_size, uint32_t flow_num, double fweight);

  uint32_t src_index;
  uint32_t dst_index;
  float flow_start_time;
  float flow_size;
  uint32_t flow_num;
  double fweight;
};


FlowRecord::FlowRecord(uint32_t src_index, uint32_t dst_index, float flow_start_time, float flow_size, uint32_t flow_num, double fweight)
{
  src_index = src_index;
  dst_index = dst_index;
  flow_start_time = flow_start_time;
  flow_size = flow_size;
  flow_num = flow_num;
  fweight = fweight;
} 

std::vector<FlowRecord> FlowRecords;

class MyApp : public Application
{
public:
  MyApp ();
  virtual ~MyApp ();

  //void Setup (Ptr<Socket> socket, Address address, uint32_t packetSize, DataRate dataRate, uint32_t maxbytes, double flow_start, Address address1);
  void Setup (Address address, uint32_t packetSize, DataRate dataRate, uint32_t maxbytes, double flow_start, Address address1, Ptr<Node> pnode, uint32_t fid, Ptr<Node> dnode);
  virtual void StartApplication (void);
private:

  void ScheduleTx (void);
  void SendPacket (void);
  virtual void StopApplication (void);


  Ptr<Socket>     m_socket;
  Address         m_peer;
  uint32_t        m_packetSize;
  DataRate        m_dataRate;
  EventId         m_sendEvent;
  bool            m_running;
  uint32_t        m_packetsSent;
  uint32_t        m_maxBytes;
  double          m_startTime;
  EventId         m_startEvent;
  uint32_t        m_totBytes;
  Address         myAddress;
  Ptr<Node>       srcNode;
  Ptr<Node>       destNode;
  uint32_t        m_fid;
};

std::vector< Ptr<MyApp> > apps;
MyApp::MyApp ()
  : m_socket (0),
    m_peer (),
    m_packetSize (0),
    m_dataRate (0),
    m_sendEvent (),
    m_running (false),
    m_packetsSent (0),
    m_maxBytes (0)
{
  m_totBytes = 0;
}

MyApp::~MyApp ()
{
  m_socket = 0;
}

void
//MyApp::Setup (Ptr<Socket> socket, Address address, uint32_t packetSize, uint32_t nPackets, DataRate dataRate, Ptr<RandomVariableStream> interArrival)
//MyApp::Setup (Ptr<Socket> socket, Address address, uint32_t packetSize, DataRate dataRate, uint32_t maxBytes, double start_time, Address ownaddress, Ptr<Node> sNode)
MyApp::Setup (Address address, uint32_t packetSize, DataRate dataRate, uint32_t maxBytes, double start_time, Address ownaddress, Ptr<Node> sNode, uint32_t fid, Ptr<Node> dNode)
{
  //m_socket = socket;
  m_peer = address;
  m_packetSize = packetSize;
  m_dataRate = dataRate;
  m_totBytes = 0;
  m_maxBytes = maxBytes;
  m_startTime = start_time;
  m_fid = fid;
  
  Time tNext = Time(Seconds(m_startTime));
  myAddress = ownaddress;
  srcNode = sNode;
  destNode = dNode;
  NS_LOG_UNCOND("Scheduling start of flow "<<fid<<" at time "<<Time(tNext).GetSeconds());
  m_startEvent = Simulator::Schedule (tNext, &MyApp::StartApplication, this);
}

void
MyApp::StartApplication (void)
{

  if(Simulator::Now().GetNanoSeconds() < Time(Seconds(m_startTime)).GetNanoSeconds()) {
//    std::cout<<"Time "<<Simulator::Now().GetNanoSeconds()<<" spurious call flowid "<<m_fid<<" returning before start_time "<<  Time(Seconds(m_startTime)).GetNanoSeconds()<<std::endl;
    if(Simulator::IsExpired(m_startEvent)) {
      Time tNext = Time(Seconds(m_startTime));
      m_startEvent = Simulator::Schedule (tNext, &MyApp::StartApplication, this);
//      std::cout<<"Time "<<Simulator::Now().GetSeconds()<<" spurious call flowid "<<m_fid<<" rescheduling at  "<<tNext.GetSeconds()<<std::endl;
      
    }
      
    return;

  }

  m_running = true;
  m_packetsSent = 0;
  m_totBytes = 0;
  Ptr<Socket> ns3TcpSocket = Socket::CreateSocket (srcNode, TcpSocketFactory::GetTypeId ());
  ns3TcpSockets.push_back(ns3TcpSocket);
  setuptracing(m_fid, ns3TcpSocket);
  m_socket = ns3TcpSocket;
  NS_LOG_UNCOND("number of sockets at node "<<srcNode->GetId()<<" = "<<ns3TcpSockets.size());
  if (InetSocketAddress::IsMatchingType (m_peer))
    { 
      //NS_LOG_UNCOND("flow_start "<<m_fid<<" time "<<(Simulator::Now()).GetSeconds());
      //m_socket->Bind (myAddress);
      m_socket->Bind ();
    }
  else
    {
      m_socket->Bind6 ();
    }
  m_socket->Connect (m_peer);
  SendPacket ();
  std::cout<<"flow_start "<<m_fid<<" "<<srcNode->GetId()<<" "<<destNode->GetId()<<" at "<<(Simulator::Now()).GetNanoSeconds()<<" "<<m_maxBytes<<" port "<< InetSocketAddress::ConvertFrom (m_peer).GetPort () <<std::endl;
}

void
MyApp::StopApplication (void)
{
  m_running = false;

  if (m_sendEvent.IsRunning ())
    {
      Simulator::Cancel (m_sendEvent);
    }

  if (m_socket)
    {
      m_socket->Close ();
    }
  NS_LOG_UNCOND((Simulator::Now()).GetSeconds()<<" flowid "<<m_fid<<" stopped sending ");
}

void
MyApp::SendPacket (void)
{
  
  Ptr<Packet> packet = Create<Packet> (m_packetSize);

  int ret_val = m_socket->Send( packet ); 
  
  if(ret_val != -1) {
    m_totBytes += packet->GetSize();
  } else {
 //   NS_LOG_UNCOND(Simulator::Now().GetSeconds()<<" flowid "<<m_fid<<" Tcp buffer is overflowing.. trying later");
  }

//    std::cout<<" flow_id "<<m_fid<<" sent "<<ret_val<<" bytes total bytes so far "<<m_totBytes<<std::endl;
//  NS_LOG_UNCOND(Simulator::Now().GetSeconds()<<" flowid "<<m_fid<<" bytes sent "<<m_totBytes<<" maxBytes "<<m_maxBytes);

  //if (++m_packetsSent < m_nPackets)
  if (m_totBytes < m_maxBytes)
    {
      ScheduleTx ();
    }
  
}

void
MyApp::ScheduleTx (void)
{
  //if (m_running)
  if ((m_maxBytes == 0) || (m_totBytes < m_maxBytes))
    {
//      std::cout<<Simulator::Now().GetSeconds()<<" flowid "<<m_fid<<" sent bytes "<<m_totBytes<<" m_maxBytes "<<m_maxBytes<<std::endl;
      //Time tNext (Seconds (m_packetSize * 8 / static_cast<double> (m_dataRate.GetBitRate ())));
      // We will schedule the next packet when the random number generator says we can
//      double next_time = m_interArrival->GetValue();
//      Time tNext (Seconds (next_time));
      Time tNext (Seconds (m_packetSize * 8 / static_cast<double> (m_dataRate.GetBitRate ())));
      m_sendEvent = Simulator::Schedule (tNext, &MyApp::SendPacket, this);
    } else {
      StopApplication();
    }
}
/*
static void
CwndChange (Ptr<OutputStreamWrapper> stream, uint32_t oldCwnd, uint32_t newCwnd)
{
//  NS_LOG_UNCOND (Simulator::Now ().GetSeconds () << "\t" << newCwnd);
  *stream->GetStream () << Simulator::Now ().GetSeconds () << "\t" << oldCwnd << "\t" << newCwnd << std::endl;
}

void
RTOChange (Ptr<OutputStreamWrapper> stream, ns3::Time oldRTO, ns3::Time newRTO)
{
//  NS_LOG_UNCOND (Simulator::Now ().GetSeconds () << "\t" << newCwnd);
  *stream->GetStream() << Simulator::Now ().GetSeconds () << "\t" << oldRTO.GetSeconds() << "\t" << newRTO.GetSeconds() << std::endl;
}
*/
/*
static void
RxDrop (Ptr<PcapFileWrapper> file, Ptr<const Packet> p)
{
  NS_LOG_UNCOND ("RxDrop at " << Simulator::Now ().GetSeconds ());
  file->Write (Simulator::Now (), p);
}
*/

void
CheckQueueSize (Ptr<Queue> queue)
{
  uint32_t qSize = StaticCast<PrioQueue> (queue)->GetCurSize ();
  uint32_t nid = StaticCast<PrioQueue> (queue)->nodeid;
  double qPrice = StaticCast<PrioQueue> (queue)->getCurrentPrice ();
  std::string qname = StaticCast<PrioQueue> (queue)->GetLinkIDString();
  checkTimes++;
  std::cout<<"QueueStats "<<nid<<" "<<Simulator::Now ().GetSeconds () << " " << qSize<<" "<<qPrice<<" qname "<<qname<<std::endl;
  std::map<std::string, uint32_t>::iterator it;
  for (std::map<std::string,uint32_t>::iterator it= flowids.begin(); it!= flowids.end(); ++it) {
    double dline = StaticCast<PrioQueue> (queue)->get_stored_deadline(it->first);
    std::cout<<"QueueStats1 "<<nid<<" "<<Simulator::Now().GetSeconds()<<" "<<it->second<<" "<<dline<<std::endl;
   }
  Simulator::Schedule (Seconds (sampling_interval), &CheckQueueSize, queue);
  if(Simulator::Now().GetSeconds() >= sim_time) {
    Simulator::Stop();
  }
}

void
CheckIpv4Rates (NodeContainer &allNodes)
{
  double current_rate = 0.0;
  uint32_t N = allNodes.GetN(); 
  for(uint32_t nid=0; nid < N ; nid++)
  {
    Ptr<Ipv4L3Protocol> ipv4 = StaticCast<Ipv4L3Protocol> ((allNodes.Get(nid))->GetObject<Ipv4> ());
    std::map<std::string,uint32_t>::iterator it;
    for (std::map<std::string,uint32_t>::iterator it=ipv4->flowids.begin(); it!=ipv4->flowids.end(); ++it)
    {
    
      double rate = ipv4->GetStoreRate (it->first);
      double prio = ipv4->GetStorePrio (it->first);

      uint32_t s = it->second;


      /* check if this flowid is from this source */
      if (std::find((source_flow[nid]).begin(), (source_flow[nid]).end(), s)!=(source_flow[nid]).end()) {
         std::cout<<"RatePrio flowid "<<it->second<<" "<<Simulator::Now ().GetSeconds () << " " << rate << " "<<prio<<std::endl;
         current_rate += rate;
      }
    }
  }
  std::cout<<Simulator::Now().GetSeconds()<<" TotalRate "<<current_rate<<std::endl;
  
  // check queue size every 1/1000 of a second
  Simulator::Schedule (Seconds (sampling_interval), &CheckIpv4Rates, allNodes);
  if(Simulator::Now().GetSeconds() >= sim_time) {
    Simulator::Stop();
  }
}

Ipv4InterfaceContainer assignAddress(NetDeviceContainer dev, uint32_t subnet_index)
{
    /** assigining ip address **/

    Ipv4InterfaceContainer intf;

    std::ostringstream subnet;
    Ipv4AddressHelper ipv4;
    NS_LOG_UNCOND("Assigning subnet index "<<subnet_index);
    subnet<<"10.1."<<subnet_index<<".0";
    ipv4.SetBase (subnet.str ().c_str (), "255.255.255.0");
    intf = ipv4.Assign (dev);
    return intf;

}


void sinkInstallNode(uint32_t sourceN, uint32_t sinkN, uint16_t port, uint32_t flow_id, double startTime, uint32_t numBytes)
{
  // Create a packet sink on the star "hub" to receive these packets
  Address anyAddress = InetSocketAddress (Ipv4Address::GetAny (), port);
  PacketSinkHelper sinkHelper ("ns3::TcpSocketFactory", anyAddress);
  ApplicationContainer sinkAppContainer = sinkHelper.Install (sinkNodes.Get(sinkN));
  sinkAppContainer.Start(Seconds(0.0));
  sinkApps.Add(sinkAppContainer);


  NS_LOG_UNCOND("sink apps installed on node "<<(sinkNodes.Get(sinkN))->GetId());
  Ptr<PacketSink> pSink = StaticCast <PacketSink> (sinkAppContainer.Get(0));
  pSink->SetAttribute("numBytes", UintegerValue(numBytes));
  pSink->SetAttribute("flowid", UintegerValue(flow_id));
  pSink->SetAttribute("nodeid", UintegerValue(sinkNodes.Get(sinkN)->GetId()));
  pSink->SetAttribute("peernodeid", UintegerValue(sourceNodes.Get(sourceN)->GetId()));


  /* Debug... Check what we set */
  UintegerValue nb, fid, n1, n2;
  pSink->GetAttribute("numBytes", nb);
  pSink->GetAttribute("flowid", fid);
  pSink->GetAttribute("nodeid", n1);
  pSink->GetAttribute("peernodeid", n2);
  NS_LOG_UNCOND("sink attributed set : numbytes "<<nb.Get()<<" flowid "<<fid.Get()<<" nodeid "<<n1.Get()<<" source nodeid "<<n2.Get());
  
  /* Debug end */

//  Config::SetDefault("ns3::PacketSink::StartMeasurement",TimeValue(Seconds(measurement_starttime)));
}
  
/*
ApplicationContainer sinkInstall(NodeContainer clientNodes)
{

  // Create a packet sink on the star "hub" to receive these packets
  Address anyAddress = InetSocketAddress (Ipv4Address::GetAny (), port);

//  Address sinkLocalAddress (InetSocketAddress (Ipv4Address::GetAny (), port));
  PacketSinkHelper sinkHelper ("ns3::TcpSocketFactory", anyAddress);
  ApplicationContainer sinkApps;

  for (uint32_t i=0; i<clientNodes.GetN(); i++) {
    sinkApps.Add(sinkHelper.Install (clientNodes.Get(i)));
    NS_LOG_UNCOND("sink apps installed on node "<<(clientNodes.Get(i))->GetId());
  }

  return sinkApps;
}
*/
void printlink(Ptr<Node> n1, Ptr<Node> n2)
{
  NS_LOG_UNCOND("printlink: link setup between node "<<n1->GetId()<<" and node "<<n2->GetId());
} 


Ptr<EmpiricalRandomVariable>  SetUpEmpirical(std::string fname)
{
  Ptr<EmpiricalRandomVariable> x = CreateObject<EmpiricalRandomVariable> ();
  std::ifstream myfile (fname.c_str(),  std::ifstream::in);
  NS_LOG_UNCOND("SetUpEmpirical... ");
  if (myfile.is_open())
  {
    double val, one, prob;

    while(myfile >> val >> one >> prob)
    {
    /*while ( getline (myfile,line) )
      const char *myString = line.c_str();
      NS_LOG_UNCOND("myString is "<<myString);
      char *p = strtok(myString, " ");
      double val =  std::stod(p, &sz);
      char *one = strtok(NULL, " ");
      char *q = strtok(NULL, " ");
      double prob = std::stod(q, &sz);  */
      
      NS_LOG_UNCOND("EmpiricalRandSetup val = "<<val<<" prob = "<<prob<<" one "<<one);
      
      x->CDF(val, prob); 
    }
    myfile.close();
  } else {
    NS_LOG_UNCOND("EmpiricalRandSetup. File not found "<<fname );
  }
  return x;
}

void startFlow(uint32_t sourceN, uint32_t sinkN, double flow_start, uint32_t flow_size, uint32_t flow_id)
{
  ports[sinkN]++;
  // Socket at the source
  Ptr<Ipv4> sink_node_ipv4 = (sinkNodes.Get(sinkN))->GetObject<Ipv4> ();
  Ipv4Address remoteIp = sink_node_ipv4->GetAddress (1,0).GetLocal();
  Address remoteAddress = (InetSocketAddress (remoteIp, ports[sinkN]));
  sinkInstallNode(sourceN, sinkN, ports[sinkN], flow_id, flow_start, flow_size);

  // Get source address
  Ptr<Ipv4> source_node_ipv4 = (sourceNodes.Get(sinkN))->GetObject<Ipv4> (); 
  Ipv4Address sourceIp = source_node_ipv4->GetAddress (1,0).GetLocal();
  Address sourceAddress = (InetSocketAddress (sourceIp, ports[sinkN]));

  //Ptr<Socket> ns3TcpSocket = Socket::CreateSocket (sourceNodes.Get(sourceN), TcpSocketFactory::GetTypeId ());
//  Ptr<Socket> ns3TcpSocket = Socket::CreateSocket (sourceNodes.Get(sourceN), TcpSocketFactory::GetTypeId ());
//  ns3TcpSockets.push_back(ns3TcpSocket);
//  NS_LOG_UNCOND("number of sockets at node "<<sourceNodes.Get(sourceN)->GetId()<<" = "<<ns3TcpSockets.size());
  Ptr<MyApp> SendingApp = CreateObject<MyApp> ();
  //SendingApp->Setup (ns3TcpSocket, remoteAddress, pkt_size, DataRate ("1Gbps"), flow_size, flow_start, sourceAddress, sourceNodes.Get(sourceN));
  SendingApp->Setup (remoteAddress, pkt_size, DataRate (link_rate_string), flow_size, flow_start, sourceAddress, sourceNodes.Get(sourceN), flow_id, sinkNodes.Get(sinkN));
  //apps.Add(SendingApp);
  (sourceNodes.Get(sourceN))->AddApplication(SendingApp);
      
  Ptr<Ipv4L3Protocol> ipv4 = StaticCast<Ipv4L3Protocol> ((sourceNodes.Get(sourceN))->GetObject<Ipv4> ()); // Get Ipv4 instance of the node
  Ipv4Address addr = ipv4->GetAddress (1, 0).GetLocal();

  std::cout<<"FLOW_INFO source_node "<<(sourceNodes.Get(sourceN))->GetId()<<" sink_node "<<(sinkNodes.Get(sinkN))->GetId()<<" "<<addr<<":"<<remoteIp<<" flow_id "<<flow_id<<" start_time "<<flow_start<<" dest_port "<<ports[sinkN]<<" flow_size "<<flow_size<<std::endl;
  (source_flow[(sourceNodes.Get(sourceN))->GetId()]).push_back(flow_id);
  std::stringstream ss;
  ss<<addr<<":"<<remoteIp<<":"<<ports[sinkN];
  std::string s = ss.str(); 
  flowids[s] = flow_id;

  ipv4->setFlow(s, flow_id, flow_size);
  //flow_id++;
}


void AddToFlowRecord(uint32_t src_index, uint32_t dst_index, float flow_start_time, float flow_size, uint32_t flow_num)
{
  double fweight = 1.0;
  FlowRecord f1(src_index, dst_index, flow_start_time, flow_size, flow_num, fweight);
  FlowRecords.push_back(f1);
  flow_sizes[flow_num] = flow_size;
} 
   

void WriteFlowSizes(NodeContainer &allNodes)
{
  uint32_t Ntrue = allNodes.GetN(); 
  for(uint32_t nid=0; nid<Ntrue; nid++)
  {
     Ptr<Ipv4> ipv4 = (allNodes.Get(nid))->GetObject<Ipv4> ();
     NS_LOG_UNCOND("Setting flows up... "); 
     StaticCast<Ipv4L3Protocol> (ipv4)->setFlowSizes(flow_sizes);
  }
}
      

void startFlows(Ptr<EmpiricalRandomVariable> empirical_rand, NodeContainer &allNodes)
{
  double lambda = (link_rate * load ) / (meanflowsize*8.0);
  lambda = lambda / sourceNodes.GetN(); 
  double avg_interarrival = 1/lambda;

  Ptr<ExponentialRandomVariable> exp = CreateObject<ExponentialRandomVariable> ();
  exp->SetAttribute("Mean", DoubleValue(avg_interarrival));
  NS_LOG_UNCOND("lambda is "<<lambda<<" denom "<<sourceNodes.GetN()<<" avg_interarrival "<<avg_interarrival);

  uint32_t flow_num = 1;

  //double fflowsizes[] = {1250000000, 625000000, 625000,1250000 };
   
  for (uint32_t i=0; i < sourceNodes.GetN(); i++) 
  {
    for(uint32_t j=0; j < sinkNodes.GetN(); j++) 
    {
      double flow_start_time = 0.0;
      double time_now = 1.0;
     
      while(time_now < (sim_time-1.0))
      {
        // flow size 
        double flow_size = empirical_rand->GetValue(); 
        double inter_arrival = exp->GetValue();
        flow_start_time = time_now + inter_arrival;
        NS_LOG_UNCOND("next arrival after "<<inter_arrival<<" flow_start_time "<<flow_start_time);
        time_now = flow_start_time; // is this right ?
        NS_LOG_UNCOND("flow between "<<(sourceNodes.Get(i))->GetId()<<" and "<<(sinkNodes.Get(j))->GetId()<<" starting at time "<<flow_start_time<<" of size "<<flow_size<<" flow_num "<<flow_num);

        startFlow(i, j, flow_start_time, flow_size, flow_num); 
        AddToFlowRecord(i, j, flow_start_time, flow_size, flow_num);
        flow_num++;
      }
    }
  }

  WriteFlowSizes(allNodes);
  
//  ApplicationContainer last_sinkapp = sinkApps.Get(sinkApps.GetN()-1); 
  //Ptr<PacketSink> last_sinkapp = StaticCast <PacketSink>  sinkApps.Get((sinkApps.GetN()-1)); 

  uint32_t counter = 0;
  ApplicationContainer::Iterator sapp;
  for (sapp = sinkApps.Begin (); sapp != sinkApps.End (); ++sapp)
  {
    Ptr<PacketSink> sink1 = DynamicCast<PacketSink> (*sapp);
    if(counter < flow_num-2) {
      sink1->SetAttribute("last_flow", BooleanValue(false));
    } else {
      sink1->SetAttribute("last_flow", BooleanValue(true));
    }
    counter++;
  }
  //Ptr<PacketSink> last_sinkapp = StaticCast <PacketSink>  (sinkApps.Get(flow_num-1)); 
  //last_sinkapp->SetAttribute("last_flow", BooleanValue(true));
  uint32_t num_ports = sourceNodes.GetN() + sinkNodes.GetN();
  std::cout<<"num_ports "<<num_ports<<std::endl;
  std::cout<<"num_flows "<<(flow_num-1)<<std::endl;
}


        
void setuptracing(uint32_t sindex, Ptr<Socket> skt)
{
 /* 
    //configure tracing
    std::string one = ".cwnd";
    std::stringstream ss;
    ss << "."<<sindex;
    std::string str = ss.str();
    std::string hname1 = prefix+one+str;
    NS_LOG_UNCOND("cwnd output in "<<hname1);
   
    AsciiTraceHelper asciiTraceHelper;
    Ptr<OutputStreamWrapper> stream0 = asciiTraceHelper.CreateFileStream (hname1);
    skt->TraceConnectWithoutContext ("CongestionWindow", MakeBoundCallback (&CwndChange, stream0));
  */
}
         
   

int 
main (int argc, char *argv[], char *env[])
{
  // Users may find it convenient to turn on explicit debugging
  // for selected modules; the below lines suggest how to do this

  //LogComponentEnable ("Ipv4EndPointDemux", LOG_LEVEL_ALL);
  //LogComponentEnable ("TcpServer", LOG_LEVEL_INFO);
  //LogComponentEnable ("TcpL4Protocol", LOG_LEVEL_ALL);
  //LogComponentEnable ("TcpSocketImpl", LOG_LEVEL_ALL);
  //LogComponentEnable ("PacketSink", LOG_LEVEL_ALL);
  //LogComponentEnable ("OnOffApplication", LOG_LEVEL_ALL);
  //LogComponentEnable ("Ipv4Header", LOG_LEVEL_ALL);
  //LogComponentEnable ("TcpSocketBase", LOG_LEVEL_ALL);
  //LogComponentEnable ("TcpNewReno", LOG_LEVEL_ALL);
  //LogComponentEnable ("PrioQueue", LOG_LEVEL_ALL);
  //LogComponentEnable ("RTOEstimator", LOG_LEVEL_ALL);
  //LogComponentEnable ("Ipv4L3Protocol", LOG_LEVEL_ALL);
  //LogComponentEnable ("PointToPointChannel", LOG_LEVEL_ALL);

  // Set up some default values for the simulation.
  //Config::SetDefault ("ns3::OnOffApplication::DataRate", StringValue ("5000kb/s"));
  uint32_t N = 4; //number of nodes in the star
  std::string queue_type;
  std::string empirical_dist_file = "DCTCP_CDF"; //file name containing empirical dist
  double epoch_update_time = 0.01;
  std::string flow_util_file;
  bool pkt_tag, onlydctcp, wfq, dctcp_mark;
  bool strawmancc = false;
  bool margin_util_price, m_pfabric = false;
  double fct_alpha = 1/16;
  

  // Allow the user to override any of the defaults and the above
  // Config::SetDefault()s at run-time, via command-line arguments
  CommandLine cmd;
  cmd.AddValue("fct_alpha", "fct_alpha", fct_alpha);
  cmd.AddValue("util_method", "util_method",  util_method);
  cmd.AddValue("m_pfabric", "m_pfabric",  m_pfabric);
  cmd.AddValue("pkt_tag","pkt_tag",pkt_tag);
  cmd.AddValue("dctcp_mark","dctcp_mark",dctcp_mark);
  cmd.AddValue ("nNodes", "Number of nodes to place in the star", N);
  cmd.AddValue ("prefix", "Output prefix", prefix);
  cmd.AddValue ("queuetype", "Queue Type", queue_type);
  cmd.AddValue ("load", "Fabric load", load);
  cmd.AddValue ("empirical_dist_file", "name of the file that contains empirical dist of packets", empirical_dist_file);
  cmd.AddValue ("epoch_update_time", "Epoch Update", epoch_update_time);
  cmd.AddValue ("flow_util_file", "flow_util_file", flow_util_file);
  cmd.AddValue ("onlydctcp", "onlydctcp", onlydctcp);
  cmd.AddValue ("wfq", "wfq", wfq);
  cmd.AddValue ("sim_time", "sim_time", sim_time);
  cmd.AddValue ("pkt_size", "pkt_size", pkt_size);
  cmd.AddValue ("link_rate","link_rate",link_rate);
  cmd.AddValue ("link_delay","link_delay",link_delay);
  cmd.AddValue ("ecn_thresh", "ecn_thresh", max_ecn_thresh);

  cmd.AddValue("gamma", "gamma", gamma_value);
  cmd.AddValue("margin_util_price", "margin_util_price", margin_util_price);
  cmd.AddValue("strawmancc", "strawmancc", strawmancc);
  cmd.AddValue ("price_update_time", "price_update_time", price_update_time);
  cmd.AddValue ("rate_update_time", "rate_update_time", rate_update_time);

  cmd.Parse (argc, argv);

  if(link_rate == 10000000000) {
    link_rate_string = "10Gbps";
  } else if(link_rate == 100000000000) {
    link_rate_string = "100Gbps";
  }

  NS_LOG_UNCOND("file prefix "<<prefix);

  /* print all command line parameters */
  NS_LOG_UNCOND("num_nodes "<<N<<" prefix "<<prefix<<" queuetype "<<queue_type<<" load "<<load<<" empirical_dist_file "<<empirical_dist_file);
  
  /* command line parameters print end */
  
  double total_rtt = link_delay * 4.0;
  uint32_t bdproduct = link_rate *total_rtt/(1000000.0* 8.0);
  uint32_t initcwnd = (bdproduct / max_segment_size)+1;
  uint32_t ssthresh = initcwnd * max_segment_size;

  NS_LOG_UNCOND("Setting ssthresh = "<<ssthresh<<" initcwnd = "<<initcwnd);  
  if(strawmancc) {
    initcwnd = initcwnd*4.0;
  }
  

  Config::SetDefault ("ns3::TcpL4Protocol::SocketType", TypeIdValue (TcpNewReno::GetTypeId ()));
  Config::SetDefault ("ns3::TcpSocket::SegmentSize", UintegerValue(max_segment_size));
//  Config::SetDefault ("ns3::TcpSocket::InitialSlowStartThreshold", UintegerValue(ssthresh_value));
  Config::SetDefault ("ns3::TcpSocket::InitialSlowStartThreshold", UintegerValue(ssthresh));
  Config::SetDefault ("ns3::TcpSocket::InitialCwnd", UintegerValue(initcwnd));
  Config::SetDefault ("ns3::TcpSocketBase::Timestamp", BooleanValue(false));
  Config::SetDefault ("ns3::TcpSocketBase::ReceiverWillMark", BooleanValue(true));
//  Config::SetDefault ("ns3::RttEstimator::MinRTO", TimeValue(Seconds(0.001)));
  Config::SetDefault("ns3::TcpSocket::RcvBufSize", UintegerValue (recv_buf_size));
  Config::SetDefault("ns3::TcpSocket::SndBufSize", UintegerValue (send_buf_size));
  // Disable delayed ack
  Config::SetDefault("ns3::TcpSocket::DelAckCount", UintegerValue (1));
  Config::SetDefault("ns3::TcpNewReno::dctcp", BooleanValue(true));
  Config::SetDefault("ns3::TcpNewReno::smoother_dctcp", BooleanValue(false));
  Config::SetDefault("ns3::TcpNewReno::strawmancc", BooleanValue(strawmancc));

  Config::SetDefault("ns3::PacketSink::StartMeasurement",TimeValue(Seconds(measurement_starttime)));
  Config::SetDefault("ns3::PrioQueue::fluid_model", BooleanValue(false));
  Config::SetDefault("ns3::PrioQueue::running_min", BooleanValue(false));
  Config::SetDefault("ns3::PrioQueue::SubtractPrio", BooleanValue(false));
  Config::SetDefault("ns3::PrioQueue::ReceiverMarks", BooleanValue(false));
  Config::SetDefault("ns3::PrioQueue::MinPrioUpdateTime", TimeValue(Seconds(prio_q_min_update_time)));
  Config::SetDefault("ns3::PrioQueue::PriceUpdateTime", TimeValue(Seconds(price_update_time)));

  Config::SetDefault("ns3::PrioQueue::gamma", DoubleValue(gamma_value));
  Config::SetDefault("ns3::PrioQueue::gamma1", DoubleValue(gamma1_value));
  Config::SetDefault("ns3::PrioQueue::margin_util_price", BooleanValue(true));
  Config::SetDefault("ns3::PrioQueue::m_onlydctcp", BooleanValue(onlydctcp));
  Config::SetDefault("ns3::PrioQueue::m_pkt_tag", BooleanValue(pkt_tag));
  Config::SetDefault("ns3::PrioQueue::dctcp_mark", BooleanValue(dctcp_mark));
  Config::SetDefault("ns3::PrioQueue::m_pfabricdequeue",BooleanValue(m_pfabric));

  Config::SetDefault("ns3::PrioQueue::alpha", DoubleValue(alpha_value));
  Config::SetDefault("ns3::PrioQueue::target_queue", DoubleValue(target_queue));

  Config::SetDefault("ns3::PrioQueue::alpha", DoubleValue(alpha_value));
  Config::SetDefault("ns3::PrioQueue::gamma", DoubleValue(gamma_value));
  Config::SetDefault("ns3::PrioQueue::target_queue", DoubleValue(target_queue));


  Config::SetDefault ("ns3::DropTailQueue::Mode" , StringValue("QUEUE_MODE_BYTES"));
  Config::SetDefault ("ns3::DropTailQueue::MaxBytes", UintegerValue(max_queue_size));
  
  Config::SetDefault ("ns3::PrioQueue::Mode", StringValue("QUEUE_MODE_BYTES"));
  Config::SetDefault ("ns3::PrioQueue::MaxBytes", UintegerValue (max_queue_size));

  Config::SetDefault ("ns3::PrioQueue::ECNThreshBytes", UintegerValue (max_ecn_thresh));
  NS_LOG_UNCOND("Set max_ecn_thresh at "<<max_ecn_thresh);

  Config::SetDefault("ns3::Ipv4L3Protocol::m_pkt_tag", BooleanValue(pkt_tag));
  Config::SetDefault("ns3::Ipv4L3Protocol::m_wfq", BooleanValue(wfq));
  Config::SetDefault("ns3::Ipv4L3Protocol::UtilFunction", UintegerValue(util_method));
  Config::SetDefault("ns3::Ipv4L3Protocol::m_pfabric", BooleanValue(m_pfabric));
  Config::SetDefault("ns3::Ipv4L3Protocol::rate_based", BooleanValue(strawmancc));

  Config::SetDefault("ns3::PrioQueue::margin_util_price", BooleanValue(margin_util_price));
  Config::SetDefault("ns3::PrioQueue::scen2", BooleanValue(false));
  Config::SetDefault("ns3::PrioQueue::strawmancc",BooleanValue(strawmancc));

  bottleNeckNode.Create(1);
  sourceNodes.Create(N/2);
  sinkNodes.Create(N/2);
 

  ports = new uint16_t [sinkNodes.GetN()];
   
  for (uint32_t i=0; i <sinkNodes.GetN(); i++) {
    ports[i] = 1;
  }
  NodeContainer allNodes = NodeContainer (bottleNeckNode, sourceNodes, sinkNodes);
  InternetStackHelper internet;
  internet.Install (allNodes);

  // We create the channels first without any IP addressing information
  //
  // Queue, Channel and link characteristics
  NS_LOG_INFO ("Create channels.");
  PointToPointHelper p2pbottleneck;
  p2pbottleneck.SetDeviceAttribute ("DataRate", StringValue (link_rate_string));
  p2pbottleneck.SetChannelAttribute ("Delay", TimeValue(MicroSeconds(7.5)));
  p2pbottleneck.SetQueue("ns3::PrioQueue", "pFabric", StringValue("1"),"DataRate", StringValue(link_rate_string));


  // Create links between all sourcenodes and bottlenect switch
  //
  std::vector<NetDeviceContainer> source_links;
  std::vector<NetDeviceContainer> sink_links;
  for(uint32_t nid = 0; nid < sourceNodes.GetN(); nid++) {
    source_links.push_back(p2pbottleneck.Install(sourceNodes.Get(nid), bottleNeckNode.Get(0)));
    printlink(sourceNodes.Get(nid), bottleNeckNode.Get(0));
    Ptr<PointToPointNetDevice> ptr1(dynamic_cast<PointToPointNetDevice*>(PeekPointer(source_links[nid].Get(0))));
    NS_LOG_UNCOND("link data rate set to "<<ptr1->GetDataRate());
  }

  for(uint32_t nid = 0; nid < sinkNodes.GetN(); nid++) {
    sink_links.push_back(p2pbottleneck.Install(bottleNeckNode.Get(0), sinkNodes.Get(nid)));
    printlink(bottleNeckNode.Get(0), sinkNodes.Get(nid));
  }
  std::vector<Ipv4InterfaceContainer> sourceAdj(source_links.size());
  std::vector<Ipv4InterfaceContainer> sinkAdj(sink_links.size());
    
  uint32_t cur_subnet = 0;
  uint32_t queue_id = 1;

  for (uint32_t index=0; index<2; index++) {
    std::vector<NetDeviceContainer> dev_cont;
    if(index == 0) {
      dev_cont = source_links;
    } else {
      dev_cont = sink_links;
    }

    for(uint32_t i=0; i < dev_cont.size(); ++i)
    {
      // set it as switch
      Ptr<PointToPointNetDevice> nd = StaticCast<PointToPointNetDevice> ((dev_cont[i]).Get(0));
      Ptr<Queue> queue = nd->GetQueue ();
      uint32_t nid = (nd->GetNode())->GetId(); 
      std::cout<<"Node id is "<<(nd->GetNode())->GetId()<<std::endl;

      // the other end
      Ptr<PointToPointNetDevice> nd1 = StaticCast<PointToPointNetDevice> ((dev_cont[i]).Get(1));
      Ptr<Queue> queue1 = nd1->GetQueue ();
      uint32_t nid1 = (nd1->GetNode())->GetId(); 
      std::cout<<"Node id is "<<(nd1->GetNode())->GetId()<<std::endl;

     // get the string version of names of the queues 
     std::stringstream ss;
     ss<<nid<<"_"<<nid<<"_"<<nid1;
     std::string fkey1 = ss.str(); 

     std::cout<<"fkey1 "<<fkey1<<std::endl;

     std::stringstream ss1;
     ss1<<nid1<<"_"<<nid<<"_"<<nid1;
     std::string fkey2 = ss1.str(); 
     std::cout<<"fkey2 "<<fkey2<<std::endl;

      // first queue 
      StaticCast<PrioQueue> (queue)->SetNodeID(nid);
      StaticCast<PrioQueue> (queue)->SetLinkIDString(fkey1);
      queue_id++;
      BooleanValue is_switch;
      StaticCast<PrioQueue> (queue)->SetAttribute("is_switch", BooleanValue("true"));
      std::cout<<"Set node "<<nid<<" as switch"<<std::endl;
      Simulator::Schedule (Seconds (1.0), &CheckQueueSize, queue);
      StaticCast<PrioQueue> (queue)->GetAttribute("is_switch", is_switch);
      std::cout<<"Set the queue id "<<queue_id<<" to queue between "<<nid<<" and "<<nid1<<std::endl;

     // second queue
     StaticCast<PrioQueue> (queue1)->SetNodeID(nid1);
     StaticCast<PrioQueue> (queue1)->SetLinkIDString(fkey2);
     StaticCast<PrioQueue> (queue1)->SetAttribute("is_switch", BooleanValue("true"));
     NS_LOG_UNCOND("Set node "<<nid1<<" as switch");
     Simulator::Schedule (Seconds (1.0), &CheckQueueSize, queue1);
     StaticCast<PrioQueue> (queue1)->GetAttribute("is_switch", is_switch);
     //
     // assign ip address
    
     sourceAdj[i] = assignAddress(dev_cont[i], cur_subnet);
     cur_subnet++;
   }
  }


  //Turn on global static routing
  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  //ApplicationContainer sinkApps = sinkInstall(sinkNodes);

  //sinkApps.Start (Seconds (1.0));
  //sinkApps.Stop (Seconds (sim_time));


  // first setup the random stream variable
  NS_LOG_UNCOND("EmpiricalRandSetup : file "<<empirical_dist_file);
  Ptr<EmpiricalRandomVariable> x = SetUpEmpirical(empirical_dist_file);
  meanflowsize = x->avg();
  NS_LOG_UNCOND("Avg of empirical values.. "<<meanflowsize);
  startFlows(x, allNodes);

  // this variable is going to tell us the length of the flow in terms of bytes
   
  /*  
  uint32_t flow_id = 1; 

  for(uint32_t i=0; i < sinkNodes.GetN(); i++) 
  {
      // Socket at the source
      Ptr<Socket> ns3TcpSocket = Socket::CreateSocket (sourceNodes.Get(i), TcpSocketFactory::GetTypeId ());
      Ptr<Ipv4> sink_node_ipv4 = (sinkNodes.Get(i))->GetObject<Ipv4> ();
      Ipv4Address remoteIp = sink_node_ipv4->GetAddress (1,0).GetLocal();
      Address remoteAddress = (InetSocketAddress (remoteIp, port));

      ns3TcpSockets.push_back(ns3TcpSocket);
      Ptr<MyApp> SendingApp = CreateObject<MyApp> ();
      SendingApp->Setup (ns3TcpSocket, remoteAddress, pkt_size, 10000000, DataRate ("1Gbps"), x->GetValue());
      apps.Add(SendingApp);
      (sourceNodes.Get(i))->AddApplication(SendingApp);
      
      Ptr<Ipv4> ipv4 = (sourceNodes.Get(i))->GetObject<Ipv4> (); // Get Ipv4 instance of the node
      Ipv4Address addr = ipv4->GetAddress (1, 0).GetLocal();

      NS_LOG_UNCOND("Config: source_node "<<(sourceNodes.Get(i))->GetId()<<" sink node "<<(sinkNodes.Get(i))->GetId()<<" source address "<<addr<<" sink address "<<remoteIp<<" flow_id "<<flow_id);
      source_flow[(sourceNodes.Get(i))->GetId()] = flow_id;
      std::stringstream ss;
      ss <<addr<<":"<<remoteIp;
      std::string s = ss.str(); 
      flowids[s] = flow_id;
      
      flow_id++;
      
   }
*/

  /* read the flow utils into a vector and send it to the ipv4module */
  std::vector<double> futils;
  std::ifstream infile(flow_util_file.c_str(), std::ifstream::in);
  std::string util_line;
  while (!infile.eof()) {
    infile >> util_line;
//    std::istringstream iss(util_line);
//    std::string fid_string;
//    iss >> fid_string;
//    std::string fid_util_string;
//    iss >> fid_util_string;
	
    int flowid = std::atoi(util_line.c_str());
    infile >> util_line;
    double weight = atof(util_line.c_str());

    futils.push_back(weight);
    NS_LOG_UNCOND("TRACKME : PUSHING "<<weight<<" "<<flowid);
  }



  uint32_t Ntrue = allNodes.GetN(); 
  for(uint32_t nid=0; nid<Ntrue; nid++)
  {
     Ptr<Ipv4> ipv4 = (allNodes.Get(nid))->GetObject<Ipv4> ();
     NS_LOG_UNCOND("Setting flows up... "); 
     //StaticCast<Ipv4L3Protocol> (ipv4)->setFlows(flowids);
     //StaticCast<Ipv4L3Protocol> (ipv4)->setQueryTime(0.000004);
     //StaticCast<Ipv4L3Protocol> (ipv4)->setAlpha(1.0/128.0);
     StaticCast<Ipv4L3Protocol> (ipv4)->setQueryTime(rate_update_time);
     StaticCast<Ipv4L3Protocol> (ipv4)->setAlpha(1.0);
     StaticCast<Ipv4L3Protocol> (ipv4)->setEpochUpdate(epoch_update_time);
     StaticCast<Ipv4L3Protocol> (ipv4)->setFlowUtils(futils);
     StaticCast<Ipv4L3Protocol> (ipv4)->setfctAlpha(fct_alpha);
  }
     
  //apps.Start (Seconds (1.0));
  //apps.Stop (Seconds (sim_time));

  Simulator::Schedule (Seconds (1.0), &CheckIpv4Rates, allNodes);

 /*
  for (uint32_t sindex=0; sindex<ns3TcpSockets.size(); sindex++)
  {
    //configure tracing
    std::string one = ".cwnd";
    std::stringstream ss;
    ss << "."<<sindex;
    std::string str = ss.str();
    std::string hname1 = prefix+one+str;
    NS_LOG_UNCOND("cwnd output in "<<hname1);
   
    AsciiTraceHelper asciiTraceHelper;
    Ptr<OutputStreamWrapper> stream0 = asciiTraceHelper.CreateFileStream (hname1);
    ns3TcpSockets[sindex]->TraceConnectWithoutContext ("CongestionWindow", MakeBoundCallback (&CwndChange, stream0));
  }
*/

  /* Trace the rto in these nodes */

 /*
  std::string rname1 = prefix+one+".rto";
  std::string rname2 = prefix+two+".rto";
  std::string rname3 = prefix+three+".rto";


  AsciiTraceHelper rtoHelper;
  Ptr<OutputStreamWrapper> rtostream = rtoHelper.CreateFileStream (rname1);
  ns3TcpSockets[0]->TraceConnectWithoutContext ("RTO", MakeBoundCallback (&RTOChange, rtostream));


  if(N > 4) {
    AsciiTraceHelper rtoHelper1;
    Ptr<OutputStreamWrapper> rtostream1 = rtoHelper1.CreateFileStream (rname2);
    ns3TcpSockets[1]->TraceConnectWithoutContext ("RTO", MakeBoundCallback (&RTOChange, rtostream1));
  }

  if(N > 6) {
    AsciiTraceHelper rtoHelper2;
    Ptr<OutputStreamWrapper> rtostream2 = rtoHelper2.CreateFileStream (rname3);
    ns3TcpSockets[2]->TraceConnectWithoutContext ("RTO", MakeBoundCallback (&RTOChange, rtostream2));
  }
*/
  NS_LOG_INFO ("Run Simulation.");

  Simulator::Run ();
  Simulator::Destroy ();
  NS_LOG_INFO ("Done.");

 /* 
  ApplicationContainer::Iterator sapp;
  uint32_t total_bytes = 0;

  double bytes1, bytes2;
  int count = 0;
  for (sapp = sinkApps.Begin (); sapp != sinkApps.End (); ++sapp)
  {
    Ptr<PacketSink> sink1 = DynamicCast<PacketSink> (*sapp);
    NS_LOG_UNCOND("Total Bytes Received: " << sink1->GetTotalRx ());
    if(count == 0) {
      bytes1 = sink1->GetTotalRx();
      count++;
    } else {
      bytes2 = sink1->GetTotalRx();
    }
    total_bytes += sink1->GetTotalRx();
  }

  NS_LOG_UNCOND("Utilization : "<<total_bytes*8.0/(1000000*(sim_time-measurement_starttime))<<" Mbps"<<" ratio "<<bytes2/bytes1);
  */

  return 0;
}


  
